{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","onSubmit","edit","useState","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","initialState","JSON","parse","localStorage","getItem","setTodos","setItem","stringify","test","newTodos","updatedTodos","console","log","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0206eee4.chunk.js","sourcesContent":["import React,{useState, useEffect, useRef} from 'react'\n\nconst TodoForm = ({onSubmit, edit}) => {\n    const [input, setInput] = useState(edit ? edit.value : '')\n\n    const inputRef = useRef(null)\n\n    useEffect(() => {\n        inputRef.current.focus()\n    },[])\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        onSubmit(\n            {\n                id: Math.floor(Math.random() * 10000),\n                text: input\n            }\n        )\n\n        setInput('')\n    }\n\n    const handleChange = (e) => {\n        setInput(e.target.value)\n    }\n\n    return (\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\n            {edit ? (\n                <>\n                <input type=\"text\" placeholder=\"Update Todo\" value={input} name=\"text\" className=\"todo-input edit\"\n                onChange={handleChange}\n                ref={inputRef}/>\n                <button className=\"todo-button edit\">Update</button>  \n                \n                </>\n            ): (\n                <>\n                \n                <input type=\"text\" placeholder=\"add a todo\" value={input} name=\"text\" className=\"todo-input\"\n                onChange={handleChange}\n                ref={inputRef}/>\n                <button className=\"todo-button\">Add Todo</button>\n                </>\n            )}\n            \n        </form>\n    )\n}\n\nexport default TodoForm\n","import React, {useState, useEffect, useRef} from 'react'\nimport {RiCloseCircleLine} from 'react-icons/ri'\nimport {TiEdit} from 'react-icons/ti'\nimport TodoForm from './TodoForm'\n\nconst Todo = ({todos, completeTodo, removeTodo, updateTodo}) => {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    })\n\n    const submitUpdate = (value) => {\n        updateTodo(edit.id, value)\n\n        setEdit({\n            id: null,\n            value: '',\n        })\n    }\n\n    if(edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate}/>\n    }\n    \n \n   return todos.map((todo, index) => (\n    <div\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\n      key={index}\n    >\n      <div  className=\"done-fixer\" key={todo.id} onClick={() => {completeTodo(todo.id) }}>\n        {todo.text}\n        \n      </div>\n      <div className='icons'>\n        <RiCloseCircleLine\n          onClick={() => removeTodo(todo.id)}\n          className='delete-icon'\n        />\n        <TiEdit\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\n          className='edit-icon'\n        />\n      </div>\n    </div>\n  ));\n    \n}\n\nexport default Todo\n","import React, {useState, useEffect} from 'react'\nimport Todo from './Todo'\nimport TodoForm from './TodoForm'\nconst TodoList = () => {\n    \n    const initialState = JSON.parse(localStorage.getItem('todos')) || []\n    \n    const [todos, setTodos] = useState(initialState)\n    \n    useEffect(() => {\n       \n        localStorage.setItem('todos', JSON.stringify(todos))\n\n    }, [todos])\n    \n    let localData = localStorage.getItem('todos')\n\n    \n    const addTodo = (todo) => {\n        // prevents empty todo\n        if(!todo.text || /^\\s*$/.test(todo.text)){\n            return\n        }\n\n        const newTodos = [todo, ...todos]\n        setTodos(newTodos)\n\n    }\n\n    const completeTodo = (id) => {\n        let updatedTodos = todos.map(todo => {\n          if (todo.id === id) {\n            todo.isComplete = !todo.isComplete;\n            console.log('clicked')\n        }\n        return todo;\n    });\n        setTodos(updatedTodos);\n      };\n\n    const removeTodo = (id) => {\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n        setTodos(removeArr)\n    }\n\n    const updateTodo = (todoId, newValue,) => {\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\n            return\n        }\n\n        setTodos((prev) => prev.map(item => (item.id === todoId ? newValue : item)))\n    }\n \n    return (\n        <div>\n            <h1>What's the plan for today?</h1>\n            <TodoForm onSubmit={addTodo}/>\n            <Todo\n            todos={todos}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n            updateTodo={updateTodo}/>\n        </div>\n    )\n}\n\nexport default TodoList\n","import './App.css';\nimport TodoForm from './components/TodoForm'\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}